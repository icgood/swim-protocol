# Generated by the Protocol Buffers compiler. DO NOT EDIT!
# source: swimprotocol/grpc/proto/swimprotocol.proto
# plugin: grpclib.plugin.main
import abc
import typing

import grpclib.const
import grpclib.client
if typing.TYPE_CHECKING:
    import grpclib.server

import swimprotocol.grpc.proto.swimprotocol_pb2


class SwimProtocolBase(abc.ABC):

    @abc.abstractmethod
    async def Ping(self, stream: 'grpclib.server.Stream[swimprotocol.grpc.proto.swimprotocol_pb2.SwimPing, swimprotocol.grpc.proto.swimprotocol_pb2.SwimAck]') -> None:
        pass

    @abc.abstractmethod
    async def PingReq(self, stream: 'grpclib.server.Stream[swimprotocol.grpc.proto.swimprotocol_pb2.SwimPingReq, swimprotocol.grpc.proto.swimprotocol_pb2.SwimAck]') -> None:
        pass

    @abc.abstractmethod
    async def Introduce(self, stream: 'grpclib.server.Stream[swimprotocol.grpc.proto.swimprotocol_pb2.SwimUpdate, swimprotocol.grpc.proto.swimprotocol_pb2.SwimGossip]') -> None:
        pass

    @abc.abstractmethod
    async def Sync(self, stream: 'grpclib.server.Stream[swimprotocol.grpc.proto.swimprotocol_pb2.SwimGossip, swimprotocol.grpc.proto.swimprotocol_pb2.SwimGossip]') -> None:
        pass

    def __mapping__(self) -> typing.Dict[str, grpclib.const.Handler]:
        return {
            '/swimprotocol.grpc.proto.SwimProtocol/Ping': grpclib.const.Handler(
                self.Ping,
                grpclib.const.Cardinality.UNARY_UNARY,
                swimprotocol.grpc.proto.swimprotocol_pb2.SwimPing,
                swimprotocol.grpc.proto.swimprotocol_pb2.SwimAck,
            ),
            '/swimprotocol.grpc.proto.SwimProtocol/PingReq': grpclib.const.Handler(
                self.PingReq,
                grpclib.const.Cardinality.UNARY_UNARY,
                swimprotocol.grpc.proto.swimprotocol_pb2.SwimPingReq,
                swimprotocol.grpc.proto.swimprotocol_pb2.SwimAck,
            ),
            '/swimprotocol.grpc.proto.SwimProtocol/Introduce': grpclib.const.Handler(
                self.Introduce,
                grpclib.const.Cardinality.UNARY_UNARY,
                swimprotocol.grpc.proto.swimprotocol_pb2.SwimUpdate,
                swimprotocol.grpc.proto.swimprotocol_pb2.SwimGossip,
            ),
            '/swimprotocol.grpc.proto.SwimProtocol/Sync': grpclib.const.Handler(
                self.Sync,
                grpclib.const.Cardinality.UNARY_UNARY,
                swimprotocol.grpc.proto.swimprotocol_pb2.SwimGossip,
                swimprotocol.grpc.proto.swimprotocol_pb2.SwimGossip,
            ),
        }


class SwimProtocolStub:

    def __init__(self, channel: grpclib.client.Channel) -> None:
        self.Ping = grpclib.client.UnaryUnaryMethod(
            channel,
            '/swimprotocol.grpc.proto.SwimProtocol/Ping',
            swimprotocol.grpc.proto.swimprotocol_pb2.SwimPing,
            swimprotocol.grpc.proto.swimprotocol_pb2.SwimAck,
        )
        self.PingReq = grpclib.client.UnaryUnaryMethod(
            channel,
            '/swimprotocol.grpc.proto.SwimProtocol/PingReq',
            swimprotocol.grpc.proto.swimprotocol_pb2.SwimPingReq,
            swimprotocol.grpc.proto.swimprotocol_pb2.SwimAck,
        )
        self.Introduce = grpclib.client.UnaryUnaryMethod(
            channel,
            '/swimprotocol.grpc.proto.SwimProtocol/Introduce',
            swimprotocol.grpc.proto.swimprotocol_pb2.SwimUpdate,
            swimprotocol.grpc.proto.swimprotocol_pb2.SwimGossip,
        )
        self.Sync = grpclib.client.UnaryUnaryMethod(
            channel,
            '/swimprotocol.grpc.proto.SwimProtocol/Sync',
            swimprotocol.grpc.proto.swimprotocol_pb2.SwimGossip,
            swimprotocol.grpc.proto.swimprotocol_pb2.SwimGossip,
        )
